#!/usr/bin/python3
import log
import os
import itertools
import collections
import glob

from carousel_common import *

log.init( '/tmp/carousel_photos.log')

ROOT = os.path.dirname(os.path.abspath(__file__))
FILELIST = os.path.join( ROOT, "photolist.txt") 
photos = os.path.join(ROOT, "photos")



def getPhotos( path ):
    log.debug( 'getphotos {}'.format( path ) )
    all = glob.glob('{}/*.jpg'.format( path) )
    all.extend( glob.glob('{}/*.jpeg'.format( path) ) )
    all.extend( glob.glob('{}/*.png'.format( path) ) )
    return all

def buildPhotoList():
    log.debug('buildphotolist')
    fileList = []

    fileLevels = collections.defaultdict(list)
    photoDirs = glob.glob( '{}/*.[0-9]'.format(photoDir) )
    log.debug('{}'.format(dirs) )

    log.debug('photoDirs: {}'.format(photoDirs) )
    for i in photoDirs:
        number = int(i[-1])
        log.debug( 'found a level {} '.format(number))
        fileLevels[number].extend ( getPhotos(i)  )

    log.debug('{}'.format(fileLevels) )


    oneIter = itertools.cycle(fileLevels[1])  # Take from this one until the other is empty
    twoIter = iter(fileLevels[2])
    try:
        while True:
            fileList.append(next(oneIter))
            fileList.append(next(twoIter))
            fileList.append(next(twoIter))
            fileList.append(next(twoIter))
    except StopIteration:
        pass

    return fileList

try:
	supervisor = Supervisor(FILELIST, buildPhotoList)
	supervisor.startProcess( ["/usr/bin/feh","-F","-Z","-D","5","-f",FILELIST ]) 
	supervisor.startProcess( ["/usr/bin/unclutter"] )
	supervisor.monitor()
except Exception as e:
	log.exception(e)


