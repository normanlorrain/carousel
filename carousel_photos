#!/usr/bin/python3
import log
import os
import itertools
import collections
import glob

import carousel_common

log.init( '/tmp/carousel_photos.log')

ROOT = os.path.dirname(os.path.abspath(__file__))
PHOTOROOT = os.path.join(ROOT, "photos")
FILELIST = os.path.join( ROOT, "photolist.txt") 



def getPhotos( path ):
    log.debug( 'getphotos {}'.format( path ) )
    all = glob.glob('{}/*.jpg'.format( path) )
    all.extend( glob.glob('{}/*.jpeg'.format( path) ) )
    all.extend( glob.glob('{}/*.png'.format( path) ) )
    return all

def buildPhotoList():
    log.debug('buildphotolist')
    fileList = []

    fileLevels = collections.defaultdict(list)
    photoDirs = glob.glob( '{}/*.[0-9]'.format(PHOTOROOT) )
    log.debug('photoDirs: {}'.format(photoDirs) )
    for i in photoDirs:
        number = int(i[-1])
        log.debug( 'found a level {} '.format(number))
        fileLevels[number].extend ( getPhotos(i)  )

    for level in fileLevels.keys():
        for filename in fileLevels[level]:
            log.debug('{} : {}'.format(level, filename) )

    oneIter = iter(fileLevels[1])
    twoIter = itertools.cycle(fileLevels[2])  # Take from this one until the other is empty
    if len(fileLevels[1]) * 3 > len(fileLevels[2]):
        log.warn('we could use more stock photos here')
    try:
        while True:
            fileList.append(next(oneIter))
            fileList.append(next(twoIter))
            fileList.append(next(twoIter))
            fileList.append(next(twoIter))
    except StopIteration:
        pass

    log.debug('COMPLETE LIST')
    for f in fileList:
        log.debug('   {}'.format(f))

    return fileList

try:
	my_env = os.environ
	my_env["DISPLAY"] = ":0"

	supervisor = carousel_common.Supervisor(FILELIST, buildPhotoList)
	supervisor.startProcess( ["/usr/bin/feh","-Y","-F","-Z","-D","5","-f",FILELIST ]) 
	#supervisor.startProcess( ["/usr/bin/unclutter"] )
	supervisor.monitor()
except Exception as e:
	log.exception(e)


